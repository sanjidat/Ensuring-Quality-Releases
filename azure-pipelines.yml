# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none



variables:
  - group: azsecret

stages:
  - stage: Provision
    jobs:
      - job: Terraformtasks
        displayName: Terraform Tasks
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: DownloadSecureFile@1
          displayName: Download azsecret.conf file
          name: azsecret
          inputs:
            secureFile: 'azsecret.conf'
        
        - task: InstallSSHKey@0
          displayName: Install SSH Key
          inputs:
            knownHostsEntry: 'known_hosts'
            sshpublickey: '$(publickey)'
            sshKeySecureFile: 'id_rsa'
        
        - task: TerraformInstaller@0
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV3@3
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            backendServiceArm: 'mynewconnection'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: 'tfstate3623'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'terraform.tfstate'
        
          
        - task: TerraformTaskV3@3
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        
        - task: TerraformTaskV3@3
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            environmentServiceNameAzureRM: 'mynewconnection'


  - stage: Archive
    jobs:
      - job: ArchiveFiles
        displayName: Archive Files
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: ArchiveFiles@2
          displayName: Archive FakerestAPI
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$fakerestapi-(Build.BuildId).zip'
        
        - task: PublishBuildArtifacts@1
          displayName: Publish Fakerestapi Artifact
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/$fakerestapi-(Build.BuildId).zip'
            ArtifactName: 'drop-fakerestapi'
            publishLocation: 'Container' 
        
        - task: ArchiveFiles@2
          displayName: Archive Jmeter
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$jmeter-(Build.BuildId).zip'
           
        - task: PublishBuildArtifacts@1
          displayName: Publish Jmeter Artifact
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/$jmeter-(Build.BuildId).zip'
            ArtifactName: 'drop-jmeter'
            publishLocation: 'Container'
        
        - task: ArchiveFiles@2
          displayName: Archive Selenium
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: true
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$selenium-(Build.BuildId).zip'
            replaceExistingArchive: false
        
        - task: PublishBuildArtifacts@1
          displayName: Publish Selenium Artifact
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/$selenium-(Build.BuildId).zip'
            ArtifactName: 'drop-selenium'
            publishLocation: 'Container'


  - stage: 
    jobs:
    - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'mynewconnection'
              appType: 'webAppLinux'
              WebAppName: 'mypro3appservice'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.ArtifactStagingDirectory)/$fakerestapi-(Build.BuildId).zip'



         
                 

                




